make是Linux下很强大的工程构建工具，它可以自动判断哪些文件需要重新编译，从而提高构建工程的效率。一般只有几个文件的工程使用gcc直接编译也不麻烦，但是如果一个工程有几十上百个源文件，使用make将是不二之选。

使用make一般会创建一个文件Makefile，这里推荐M大写。下面就来看一个简单的Makefile如何编写。

我们的工程结构如图所示，头文件都放到了inc目录下，源文件放到了src目录下。新建一个Makefile文件。

在Makefile开头，一般会定义一些变量，这里创建了5个变量，
BUILD_DIR：中间目标文件的路径
SRC_DIR：源文件的路径
INC_DIR:头文件的路径
C_FILES:c文件列表
这里有两点需要注意：1、引用变量需要使用$()将变量包起来；
		2、wildcard是一个关键字，指明后边的*是通配符
所以C_FILES变量里是所有的源文件名称列表，形如：1.c 2.c 3.c 4.c ...
OBJS:.o目标文件列表。%是一种通配符，指明两个地方的内容是一样的。
这里的意思是按照C_FILES里.c文件的名称，构造出同名称的.o文件列表。

下面是具体的构建命令。
makefile的基本语法结构是

目标：依赖
         命令

目标是我们想要得到什么，
依赖表示得到目标需要什么，
命令是指明具体如何通过依赖生成目标。

make可以指定伪目标，他们不生成具体的东西，利用他们可以实现比如生成多个目标或者执行指定命令的工作。
all是很常用的伪目标，它的依赖就是我们想要得到的东西，如果想生成多个文件，把他们都填到all的依赖列表里就可以了。

clean也是常用的伪目标，这次利用它来执行删除的命令。

这里真正的目标是main，它依赖所有的.o文件，如果没有这些文件，就查找以他们为目标的语句，然后发现他们依赖同名的.c文件，而且有这些文件，那么就执行下面的命令。
命令先创建了build目录，-p表示如果存在不报错，递归创建目录。@D表示目标的路径，不包括目标自己。$^表示依赖   $@表示目标。

当所有的.o目标都满足后，执行main下的命令构建出main，这样make就完成了整个构建过程。

make是否重新构建是通过比较目标和依赖的时间戳决定的，如果依赖更新就重新构建。这样有些没有任何改变的文件就不需要再编译而浪费时间。

目前还没有完全搞清楚make确定最终目标的机制，欢迎大家讨论交流哟。


